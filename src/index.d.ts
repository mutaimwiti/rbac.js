/**
 * Authorize a user action on an entity based on the user permissions and
 * system policies. All occurrences of the callback rule are called with
 * the req object. This allows the user to authorize based on req
 * parameters.
 *
 * @param action
 * @param entity
 * @param userPermissions
 * @param policies
 * @param req
 * @returns {*}
 */
export const authorize: (
  action,
  entity,
  userPermissions,
  policies,
  req
) => boolean;

/**
 * Create a 'can' function for your app based on system policies. The can function
 * is used to create authorization middleware for a specific action on a specific
 * entity. createCan expects the following arguments:
 *
 * - policies - the system policies definition.
 * - userPermissionsResolver - an handler that is triggered to get user permissions.
 * - unauthorizedRequestHandler - an handler that is triggered if the user is not
 *   authorized to make the request.
 * - authorizationExceptionHandler - an handler that is triggered if an exception
 *   occurs when trying to get user permissions, check authorization or when
 *   triggering unauthorizedRequestHandler.
 *
 * @param policies
 * @param userPermissionsResolver
 * @param unauthorizedRequestHandler
 * @param authorizationExceptionHandler
 * @returns {function(*=, *=): Function}
 */
export const createCan: (
  policies,
  userPermissionsResolver,
  unauthorizedRequestHandler,
  authorizationExceptionHandler
) => null;

/**
 * Loads the policies defined on the specified path. When loading, the policy
 * objects are added to an object.
 *
 * @param pathName
 */
export const loadPolicies: (pathName) => object;

/**
 * Loads the permissions defined on the specified path. When loading, the permission
 * objects are added to an object. The actions are each prefixed with the name of
 * the entity. It also adds an object with all the permissions.
 *
 * @param pathName
 * @returns {{$all: {}}}
 */
export const loadPermissions: (pathName) => object;

/**
 * Parses the permissions defined on the specified object into an object similar to
 * the one generated by loadPermissions(). When parsing, the permission objects
 * are added to an object. The actions are each prefixed with the name of the
 * entity. It also adds an object with all the permissions.
 *
 * @returns {{$all: {}}}
 * @param permissionsObj
 */
export const parsePermissions: (permissionsObj) => object;

/**
 * Checks a list of permissions against the system permissions. It returns an
 * object with two values: valid (boolean) indicating whether its valid and
 * invalids (list) with any invalid permission that may be found.
 *
 * @param systemPermissions
 * @param permissions
 * @returns {{invalids: Array, isValid: boolean}}
 */
export const validatePermissions: (systemPermissions, permissions) => object;

/**
 * Get all the permissions for an entity. For example passing 'x' will
 * return [ 'x.*', 'x.view', 'c.create', ..., ].
 *
 * @param systemPermissions
 * @param entity
 * @returns {string[]}
 */
export const getAllPermissionsFor: (systemPermissions, entity) => Array<string>;

/**
 * Get an object containing mappings (key : description) of permissions. The mapping
 * is based on the defined system permissions.
 *
 * @param systemPermissions
 * @param permissions
 * @returns {*}
 */
export const getPermissionsMap: (
  systemPermissions,
  permissions
) => Array<object>;
